TERRAFORM SCRIPT TO CREATE AWS INFRASTRUCTURE
-----------------------------------------------

STEP1: ENVIRONMENT SETUP
--------------------------
Install ubuntu18.04

#apt-get updated
#python --version
#apt install  python-pip
#pip install  --upgrade pip
#curl -o https://releases.hashicorp.com/terraform/0.11.2/terraform_0.11.2_linux_amd64.zip
#ls
#mkdir /bin/terraform
#unzip terraform_0.11.2_linux_amd64.zip -d /bin/terraform
#export PATH=$PATH:/bin/terraform
#terraform --version
#pip install awscli --upgrade
#aws --version
#apt-get update
#apt-get install software-properties-common
#apt-add-respository ppa:ansible/ansible
#apt-get update
#apt-get install ansible
#ansible --version
#ssh-keygen
#ssh-agent bash
#ssh-add ~/.ssh/id_rsa
#ssh-add -l
#vim /etc/ansible/ansible.cfg
/host search
uncomment "host_key_checking = False"
#mkdir terransible
#cd  terransible

STEP2:IAM AND DNS SETUP
------------------------

Go to IAM and create a new user and allow programmtic access=>attach existing policies directly=> administrator/access=> Review and create user

and finally donwload .csv file 

Access Key ID and Secret access key


ii)Login to the server:

aws configure --profile diyascloud
Access key Id:
Secret Access Key:
Region name: us-east-1

#aws ec2 describe-instances --profile diyascloud

iii)
#aws route53 create-reusable-delegation-set --caller-reference 1224 --profile diyascloud

copy and paste the info safely somewhere (IMportant steps and required info)\

add those info in aws console>> Route53 >> Registered domains>> add those NS infor as shown above in the command

STEP3:CREDENTIALS AND VARIABLES
-------------------------------

#mkdir terransible
#cd terransible
#touch main.tf terraform.tfvars variables.tf
#touch userdata aws_hosts wordpress.yml s3update.yml

#vi main.tf
provider "aws" {
 region = "${var.aws_region}"
 profile = "${var.aws_profile}"
}

#vi variables.tf
variable "aws_regions" {}
variable "aws_profile" {}

#vi terraform.tfvars
aws_profile = "diyascloud"
aws_region = "us-east-1

STEP4:CREATING THE VPC
-----------------------

vi main.tf


#---- VPC -----#
resource "aws_vpc" "wp_vpc" {
  cidr_block = "${var.vpc_cidr}"
  enable_dns_hostnames = true
  enable_dns_support =  true

  tags {
     Name = "wp_vpc"
   }
}


#Internet GW
resource "aws_internet_gateway" "wp_internet_gateway" {
  vpc_id =  "${aws_vpc.wp_vpc.id}"
  tags {
     Name = "wp_igw"
   }
}


# Route Tables#
resource "aws_route_table" "wp_public_rt" {
  vpc_id = "${aws_vpc.wp_vpc.id}"

  route{
    cidr_block = "0.0.0.0/0"
    gateway_id = "${aws_internet_gateway.wp_internet_gateway.id}"
  }
 tags {
   Name = "wp_public"
  }
}

resource "aws_default_route_table" wp_private_rt" {
  default_route_table_id = "${aws_vpc.wp_vpc.default_route_table_id}"

  tags {
    Name = "wp_private"
   }
}

#vi variables.tf

variable "aws_regions" {}
variable "aws_profile" {}

data "aws_availability_zones" "available" {}

variable "vpc_cidr" {}  #=> added from below echo command

#vi terraform.tfvars
aws_profile = "diyascloud"
aws_region = "us-east-1"
vpc_cidr = "10.0.0.0/16"


:! echo "variable" \"vpc_cidr\" {}" >> variables.tf

:wq!
#cat variables.tf

#subnets

resource "aws_subnet" wp_public1_subnet" {
  vpc_id = "${aws_vpc.wp_vpc.id}"
  cidr_block = "${var.cidrs["public1"]}"
  map_public_ip_on_launch = true
  availability_zone = "${data.asw_availability_zones.available.names[0]}"
 
  tags {
     Name = "wp_public1"
   }
}

resource "aws_subnet" "wp_public2_subnet" {

  vpc_id = "${aws_vpc.wp_vpc.id}"
  cidr_block = "${var.cidrs["public2"]}"
  map_public_ip_on_launch = true
  availability_zone = "${data.asw_availability_zones.available.names[1]}"
 
  tags {
     Name = "wp_public2"
   }
}

resource "aws_subnet" "wp_private1_subnet" {

  vpc_id = "${aws_vpc.wp_vpc.id}"
  cidr_block = "${var.cidrs["private1"]}"
  map_public_ip_on_launch = false
  availability_zone = "${data.asw_availability_zones.available.names[0]}"
 
  tags {
     Name = "wp_private1"
   }
}

resource "aws_subnet" "wp_privat2_subnet" {

  vpc_id = "${aws_vpc.wp_vpc.id}"
  cidr_block = "${var.cidrs["private2"]}"
  map_public_ip_on_launch = false
  availability_zone = "${data.asw_availability_zones.available.names[1]}"
 
  tags {
     Name = "wp_private2"
   }
}

resource "aws_subnet" "wp_rds1_subnet" {

  vpc_id = "${aws_vpc.wp_vpc.id}"
  cidr_block = "${var.cidrs["rds1"]}"
  map_public_ip_on_launch = false
  availability_zone = "${data.asw_availability_zones.available.names[0]}"
 
  tags {
     Name = "wp_rds1"
   }
}

resource "aws_subnet" "wp_rds2_subnet" {

  vpc_id = "${aws_vpc.wp_vpc.id}"
  cidr_block = "${var.cidrs["rds2"]}"
  map_public_ip_on_launch = false
  availability_zone = "${data.asw_availability_zones.available.names[1]}"
 
  tags {
     Name = "wp_rds2"
   }
}

resource "aws_subnet" "wp_rds3_subnet" {

  vpc_id = "${aws_vpc.wp_vpc.id}"
  cidr_block = "${var.cidrs["rds3"]}"
  map_public_ip_on_launch = false
  availability_zone = "${data.asw_availability_zones.available.names[2]}"
 
  tags {
     Name = "wp_rds3"
   }
}




#vi terraform.tfvars

add these lines end of the file


cidrs = {
   public1 = "10.0.1.0/24"
   public2 = "10.0.2.0/24"
   private1 = "10.0.3.0/24"
   private2 = "10.0.4.0/24"
   rds1 = "10.0.5.0/24"
   rds2 = "10.0.6.0/24"
   rds3 = "10.0.7.0/24"
}


#vi variables.tf

variable "cidrs" {
  type = "map"
}

#vi main.tf




#rds subnet group

resource "aws_db_subnet_group" "wp_rds_subnetgroup" {
  name = "wp_rds_subnetgroup"
  subnet_ids = ["${aws_subnet.wp_rds1_subnet.id}",
      "${aws_subnet.wp_rds2-subnet.id}",
      "${aws_subnet.wp_rds3-subnet.id}"
    ]
  tags {
    Name = "wp_rds_sng"
   }
}

#subnet associations

resource "aws_route_table_association" "wp_public1_assoc" {
  subnet_id = "${aws_subnet.wp_public1_subnet.id}"
  route_table_id = "${aws_route_table.wp_public_rt.id}"
}

resource "aws_route_table_association" "wp_public2_assoc" {
  subnet_id = "${aws_subnet.wp_public2_subnet.id}"
  route_table_id = "${aws_route_table.wp_public_rt.id}"
}

resource "aws_route_table_association" "wp_private1_assoc" {
  subnet_id = "${aws_subnet.wp_private1_subnet.id}"
  route_table_id = "${aws_default_route_table.wp_private_rt.id}"
}

resource "aws_route_table_association" "wp_private2_assoc" {
  subnet_id = "${aws_subnet.wp_private2_subnet.id}"
  route_table_id = "${aws_default_route_table.wp_private_rt.id}"
}

STEP6:CREATING THE SECURITY GROUPS
-----------------------------------


#vi main.tf

#Security Groups

resource "aws_security_group" "wp_dev_sg" {

   name = "wp_dev_sg"
   description = "Used for access to the dev instance"
   vpc_id = "${aws_vpc.wp_vpc.id}"

  #ssh
   ingress {
      from_port = 22
      to_port =  22
      protocol = "tcp"
      cidr_blocks = ["${var.localip}"]
    }

  #HTTP
   ingress {
      from_port = 80
      to_port =  80
      protocol = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }


   egress {
      from_port = 0
      to_port =  0
      protocol = "-1"
      cidr_blocks = ["0.0.0.0/0"]
    }
}


#public security group
resource "aws_security_group" "wp_public_sg" {

   name = "wp_public_sg"
   description = "Used for ELB for public access"
   vpc_id = "${aws_vpc.wp_vpc.id}"


  #HTTP
   ingress {
      from_port = 80
      to_port =  80
      protocol = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }


   egress {
      from_port = 0
      to_port =  0
      protocol = "-1"
      cidr_blocks = ["0.0.0.0/0"]
    }
}

#Private security Group

resource "aws_security_group" "wp_private_sg" {

   name = "wp_private_sg"
   description = "Used for private instances"
   vpc_id = "${aws_vpc.wp_vpc.id}"

  #Access from VPC
   ingress {
      from_port = 0
      to_port =  0
      protocol = "-1"
      cidr_blocks = ["${var.vpc_cidr}"]
    }

   egress {
      from_port = 0
      to_port =  0
      protocol = "-1"
      cidr_blocks = ["0.0.0.0/0"]
    }
}

#RDS security Group

resource "aws_security_group" "wp_rds_sg" {

   name = "wp_rds_sg"
   description = "Used for RDS instances"
   vpc_id = "${aws_vpc.wp_vpc.id}"

  #sql access from public/private SGs
   ingress {
      from_port =3306
      to_port =  3306
      protocol = "tcp"
      security_groups = ["${aws_security_group.wp_dev_sg.id}",
	"${aws_security_group.wp_public_sg.id}",
	"${aws_security_group.wp_private_sg.id}"         
    ]
}
}




#vi terraform.tfvars

localip = "yourserverip/32"

:! curl canhazip.com


#terraform plan
#vi terraform.tfvars
:! echo "variable \"localip\" {}" >> variables.tf

vi variables.tf
variable "localip" {}

#terraform plan

#terraform fmt --diff

STEP7:CREATE WEBSERVER INSTANCE
----------------------------------

vi main.tf

#---- Dev server ----

resource "aws_instance" "wp_dev" {
  instance_type = "${var.dev_instance_type}"
  ami = "${var.dev_ami}"
 
  tags {
    Name = "wp_dev"
  }

Key_name = "${aws_key_pair.wp_auth.id}"
vpc_security_group_ids = ["${aws_security_group.wp_dev_sg.id}"]
iam_instance_profile = "${aws_iam_instance_profile.s3_access_profile.id}"
subnet_id = "${aws_subnet.wp_public1_subnet.id}"

provisioner "local-exec" {
   command = <<EOD
cat <<EOF > aws_hosts
[dev]
${aws_instance.wp_dev.public_ip}
[dev:vars]
s3code=${aws_s3_bucket.code.bucket}
domain=${var.domain_name}
EOF
EOD
 }

 provisioner "local-exec" {
   command = "aws ec2 wait instance-status-ok --instance-ids ${aws_instance.wp_dev.id} --profile superhero && ansible-playbook -i aws_hosts wordpress.yml"
 }
}

#vi terraform.tfvars

dev_instance_type = "t2.micro"
dev_ami = "ami-b73b63a0"
public_key_path = "/root/.ssh/rsa.pub"

#vi variables.tf

variable "dev_instance_type" {}
variable "dev_ami" {}
variable "public_key_path" {}


#terraform plan
error
#vi terraform.tfvars
key_name = "rsa"

:!echo -e "variable \"key_name\" {}" >> variables.tf
#cat varaibles.tf
#terraform plan

STEP8: CREATE RDS INSTANCE
--------------------------

vi main.tf

#----- RDS -----

resource "aws_db_instance" "wp_db" {
  allocated_storage = 10
  engine = "mysql"
  engine_version = "5.6.27"
  instance_class = "${var.db_instance_class}"
  name = "${var.dbname}"
  username = "${var.dbuser}"
  password = "${var.dbpassword}"
  db_subnet_group_name = "${aws_db_subnet_group.wp_rds_subnetgroup.name}"
  vpc_security_group_ids = ["${aws_security_group.wp_rds_sg.id}"]
  skip_final_snapshot = true
}

#vi terraform.tfvars

db_instance_class = "db.t2.micro"
dbname = "diyasclouddb"
dbuser = "diyascloud"
dbpassword = "ishaan123"


vi variables.tf

variable "db_instance_class" {}
variable "dbname" {}
variable "dbuser" {}
variable "dbpassword" {}

STEP9:CREATING THE ANSIBLE PLAYBOOKS
-------------------------------------


In this lesson, we create our two Ansible Playbooks: wordpress.yml and s3update.yml.


#vi wordpress.yml
---
- hosts: dev
  become: yes
  remote_user: ec2-user
  tasks:
    - name: Install Apache.
      yum: name ={{ item }} state=present
      with_items:
      - httpd
      - php
      - php-mysql
    - name: Download Wordpress
      get_url: url=http://wordpress.org/wordpress-latest.tar.gz dest=/var/www/html/wordpress.tar.gz force=yes
    - name: Extract Wordpress
      command: "tar xzf /var/www/html/wordpress.tar.gz -C /var/www/html --strip-components 1"
    - name: make my dir tree readable
      file:
        path: /var/www/html
        mode: u=rwX,g=rX,o=rX
        recurse: yes
        owner: apache
        group: apache
     - name: Make surckete apache is started now and at boot.
       service: name=httpd state=started enabled=yes


#vi s3update.yml
---
- hosts: dev
  become: yes
  remote_user: ec2-user
  tasks:
  - name: UPdate S3 code bucket
    command: aws s3 sync /var/www/html s3://{{ s3code }}/ --delete
  - sell: echo "define('WP_SITEURL','http://dev."{{ domain }}".com');" >> wp-config.php
    args:
      chdir: /var/www/html
  - shell: echo "define('WP_HOME','http://dev."{{ domain }}".com');" >> wp-config.php
    args: 
      chdir: /var/www/html

STEP10:TERRAFORM APPLY
-----------------------

ansible --version
#vi /etc/ansible/ansible.cfg
/host_key_checking = False
Make sure it's Set to false

#ssh-add -l

could not open a connection to your auth agent
#ssh-agent bash

#ssh-add ~/.ssh/kryptonite
#ssh-add -l
#terraform --version
#aws --version
#terraform plan
#terrafform appy
enter a value:yes

#HTTP
   ingress {
      from_port = 80
      to_port =  80
      protocol = "tcp"
      cidr_blocks = ["0.0.0.0/0"]

      

